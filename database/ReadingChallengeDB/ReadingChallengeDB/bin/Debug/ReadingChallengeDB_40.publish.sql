/*
Deployment script for ReadingChallengeDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ReadingChallengeDB"
:setvar DefaultFilePrefix "ReadingChallengeDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The type for column Author in table [dbo].[Books] is currently  NVARCHAR (MAX) NULL but is being changed to  INT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Books])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [dbo].[UserBooks]...';


GO
ALTER TABLE [dbo].[UserBooks] DROP CONSTRAINT [FK__UserBooks__BookI__52593CB8];


GO
PRINT N'Starting rebuilding table [dbo].[Books]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Books] (
    [BookID] INT            IDENTITY (1, 1) NOT NULL,
    [Title]  NVARCHAR (MAX) NOT NULL,
    [Author] INT            NULL,
    [Genre]  INT            NULL,
    [Pages]  INT            NULL,
    PRIMARY KEY CLUSTERED ([BookID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Books])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Books] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Books] ([BookID], [Title], [Author], [Genre], [Pages])
        SELECT   [BookID],
                 [Title],
                 [Author],
                 [Genre],
                 [Pages]
        FROM     [dbo].[Books]
        ORDER BY [BookID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Books] OFF;
    END

DROP TABLE [dbo].[Books];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Books]', N'Books';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating unnamed constraint on [dbo].[UserBooks]...';


GO
ALTER TABLE [dbo].[UserBooks] WITH NOCHECK
    ADD FOREIGN KEY ([BookID]) REFERENCES [dbo].[Books] ([BookID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Books]...';


GO
ALTER TABLE [dbo].[Books] WITH NOCHECK
    ADD FOREIGN KEY ([Author]) REFERENCES [dbo].[Authors] ([AuthorID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Books]...';


GO
ALTER TABLE [dbo].[Books] WITH NOCHECK
    ADD FOREIGN KEY ([Genre]) REFERENCES [dbo].[Genres] ([GenreID]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--Insert default challenge types
SET IDENTITY_INSERT ChallengeTypes ON 
GO

MERGE INTO ReadingChallengeDB.dbo.ChallengeTypes AS Target 
USING (VALUES 
  (1, N'Text'), 
  (2, N'Audio'), 
  (3, N'Video')
) 
AS Source (ChallengeTypeID, Name) 
ON Target.ChallengeTypeID = Source.ChallengeTypeID 

WHEN MATCHED THEN 
UPDATE SET Name = Source.Name

WHEN NOT MATCHED BY TARGET THEN 
INSERT (challengeTypeID, Name) 
VALUES (challengeTypeID, Name);

SET IDENTITY_INSERT ChallengeTypes OFF 
GO

--Insert default Organization Categories
SET IDENTITY_INSERT OrganizationCategories ON 
GO


MERGE INTO ReadingChallengeDB.dbo.OrganizationCategories AS Target 
USING (VALUES 
  (1, N'Church'), 
  (2, N'Company'), 
  (3, N'Organization'),
  (4, N'Group'),
  (5, N'Library'),
  (6, N'School')
) 
AS Source (OrganizationCategoryID, Name) 
ON Target.OrganizationCategoryID = Source.OrganizationCategoryID 

WHEN MATCHED THEN 
UPDATE SET Name = Source.Name

WHEN NOT MATCHED BY TARGET THEN 
INSERT (OrganizationCategoryID, Name) 
VALUES (OrganizationCategoryID, Name);

SET IDENTITY_INSERT OrganizationCategories OFF 
GO

--Insert default Genres
SET IDENTITY_INSERT Genres ON 
GO


MERGE INTO ReadingChallengeDB.dbo.Genres AS Target 
USING (VALUES 
  (1, N'Nonfiction'), 
  (2, N'Fiction')  
) 
AS Source (GenreID, Name) 
ON Target.GenreID = Source.GenreID 

WHEN MATCHED THEN 
UPDATE SET Name = Source.Name

WHEN NOT MATCHED BY TARGET THEN 
INSERT (GenreID, Name) 
VALUES (GenreID, Name);

SET IDENTITY_INSERT Genres OFF 
GO

--***************COMMENT THIS OUT FOR PRODUCTION AS THIS IS JUST TEST DATAQ)*****************--
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.UserBooks'), OBJECT_ID(N'dbo.Books'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
